/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        int[] arr1  = new int[]{};
//        System.out.println(Arrays.toString(roll(1)));
//        System.out.println(average(arr1));
//        int[] arr  = {1,2,3};
//        System.out.println(containsDublicates(arr));
//
//        int[][] weeklyMonthTemperatures = {
//                {66, 64, 58, 65, 71, 57, 60},
//                {57, 65, 65, 70, 72, 65, 51},
//                {55, 54, 60, 53, 59, 57, 61},
//                {65, 56, 55, 52, 55, 62, 57}
//        };
//
//        System.out.println(Arrays.toString(insertShiftArray(arr1, 15)));
//        System.out.println(weatherData(weeklyMonthTemperatures));
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");

    }

    public static int[] roll(int n){
        Random rand = new Random();
        int[] numbers = new int[n];
        for(int i =0; i<n ; i++){
            int randomNum = rand.nextInt((6 - 1) + 1) + 1;
            numbers[i] = randomNum;
        }
        return numbers;

    }

    public static boolean containsDuplicates(int[] arr){
        boolean check = false;
        for(int i=0;i<arr.length;i++){
            for(int j=i+1;j<arr.length;j++){
                if(arr[i] == arr[j]){
                    check = true;
                }
            }
        }
        return check;
    }

    public static double average(int[] arr){
        int avg = 0;
        for(int j=0;j<arr.length;j++){
           avg = avg + arr[j];
        }
        double result = avg/arr.length;
        return result;
    }

    public static int[] arrayAvg(int[][] arr){
        HashMap<Integer, Double> array = new HashMap<>();
        for(int i =0;i<arr.length;i++){
            int sum = 0;
            for(int j= 0; j<arr[i].length; j++){
                sum = sum + arr[i][j];
            }
            double result = sum/ arr[i].length;
            System.out.println(result);
            array.put(i, result);
        }

        double min = array.get(0);
        int key = 0;
        for(int k =1; k<array.size();k++){
            if(min> array.get(k)){
                min = array.get(k);
                key = k;
            }
        }
        return arr[key];

    }


    public static int[] insertShiftArray(int[] arr, int num){
        int[] newArray = new int[arr.length+1];
        int midValue = (int) Math.ceil(arr.length/2.0);
        for(int j=0; j<arr.length ;j++){
            newArray[j]= arr[j];
        }
        for(int i =newArray.length-1; i > midValue ; i--){

            newArray[i] = newArray[i-1];
        }
        newArray[midValue] = num;
        return newArray;
    }

    public static String weatherData(int[][] arr){
        HashSet<Integer> unique = new HashSet<>();
        int max = arr[0][1];
        int min = arr[0][0];
        String returnData = "";

        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                unique.add(arr[i][j]);
                if(max< arr[i][j]){
                    max = arr[i][j];
                }
                if(min> arr[i][j]){
                    min = arr[i][j];
                }
            }
        }

       returnData = returnData + "High: " + max + "\n";
        returnData = returnData +"Low: " + min+ "\n";

        for (int i = min; i < max; i++) {
            if(!unique.contains(i)){
                returnData = returnData +"Never saw temperature: " + i + "\n";
            }

        }
        return returnData;


    }


    public static String tally(List<String> vote){
        HashMap<String, Integer> vot = new HashMap<>();
        int count = 0;
        String name = "";
        for(String names : vote){
            vot.put(names, 0);
        }

        for(String names : vote){
            if(vot.get(names) > count){
                count = vot.get(names)+1;
                name = names;
            }
            else{
                vot.put(names,vot.get(names)+1);
            }
        }

        return name;
    }

}
